{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist';\nexport const initialState = {\n  items: [],\n  filter: ''\n};\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: initialState.items,\n  reducers: {\n    add: {\n      reducer(store, _ref) {\n        let {\n          payload\n        } = _ref;\n        return [payload, ...store];\n      } // prepare(data) {\n      //     return {\n      //         payload: { ...data, id: nanoid() },\n      //     };\n      //     },\n\n\n    },\n    remove: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return state.filter(el => el.id !== payload);\n    }\n  }\n});\nconst persistConfig = {\n  key: nanoid(),\n  storage\n};\nexport const contactReducer = persistReducer(persistConfig, contactsSlice.reducer);\nexport const {\n  add,\n  remove\n} = contactsSlice.actions; // export default contactReducer;","map":{"version":3,"sources":["/Users/antonlyzun/Desktop/GoIT/goit-react-hw-06-phonebook/src/redux/contacts/contacts-slice.js"],"names":["createSlice","nanoid","storage","persistReducer","initialState","items","filter","contactsSlice","name","reducers","add","reducer","store","payload","remove","state","el","id","persistConfig","key","contactReducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,KAAK,EAAE,EADmB;AAE1BC,EAAAA,MAAM,EAAE;AAFkB,CAArB;AAKP,MAAMC,aAAa,GAAGP,WAAW,CAAC;AAChCQ,EAAAA,IAAI,EAAE,UAD0B;AAEhCJ,EAAAA,YAAY,EAAEA,YAAY,CAACC,KAFK;AAGhCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,GAAG,EAAE;AACHC,MAAAA,OAAO,CAACC,KAAD,QAAqB;AAAA,YAAb;AAAEC,UAAAA;AAAF,SAAa;AACtB,eAAO,CAACA,OAAD,EAAU,GAAGD,KAAb,CAAP;AACD,OAHF,CAIH;AACA;AACA;AACA;AACA;;;AARG,KADG;AAWRE,IAAAA,MAAM,EAAE,CAACC,KAAD,YAAwB;AAAA,UAAhB;AAAEF,QAAAA;AAAF,OAAgB;AAC5B,aAAOE,KAAK,CAACT,MAAN,CAAaU,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUJ,OAA7B,CAAP;AACD;AAbK;AAHsB,CAAD,CAAjC;AAmBA,MAAMK,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAElB,MAAM,EADS;AAEpBC,EAAAA;AAFoB,CAAtB;AAMA,OAAO,MAAMkB,cAAc,GAAGjB,cAAc,CAACe,aAAD,EAAgBX,aAAa,CAACI,OAA9B,CAArC;AACP,OAAO,MAAM;AAAED,EAAAA,GAAF;AAAOI,EAAAA;AAAP,IAAkBP,aAAa,CAACc,OAAtC,C,CACP","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist';\n\nexport const initialState = {\n  items: [],\n  filter: '',\n};\n\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: initialState.items,\n  reducers: {\n    add: {\n      reducer(store, { payload }) {\n            return [payload, ...store];\n          },\n      // prepare(data) {\n      //     return {\n      //         payload: { ...data, id: nanoid() },\n      //     };\n      //     },\n    },\n    remove: (state, { payload }) => {\n        return state.filter(el => el.id !== payload);\n      },\n    },\n});\nconst persistConfig = {\n  key: nanoid(),\n  storage,\n}\n\n\nexport const contactReducer = persistReducer(persistConfig, contactsSlice.reducer);\nexport const { add, remove } = contactsSlice.actions;\n// export default contactReducer;"]},"metadata":{},"sourceType":"module"}