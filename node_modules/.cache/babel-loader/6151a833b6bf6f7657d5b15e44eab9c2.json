{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nexport const initialState = {\n  items: [],\n  filter: ''\n};\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: initialState.items,\n  reducers: {\n    add: {\n      reducer(store, _ref) {\n        let {\n          payload\n        } = _ref;\n        return [payload, ...store];\n      },\n\n      prepare(data) {\n        return {\n          payload: { ...data,\n            id: nanoid()\n          }\n        };\n      }\n\n    },\n    remove: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return state.filter(el => el.id !== payload);\n    }\n  }\n});\nexport const {\n  add,\n  remove\n} = contactsSlice.actions;\nexport default contactsSlice.reducer; // import { createSlice } from \"@reduxjs/toolkit\";\n// import storage from 'redux-persist/lib/storage';\n// import {persistReducer} from 'redux-persist';\n\nconst contactsSlices = createSlice({\n  name: 'contactsState',\n  initialState: {\n    contacts: []\n  },\n  reducers: {\n    addContact(state, _ref3) {\n      let {\n        payload\n      } = _ref3;\n      state.contacts.push(payload);\n    },\n\n    deleteContact(state, _ref4) {\n      let {\n        payload\n      } = _ref4;\n      return {\n        contacts: state.contacts.filter(contact => contact.id !== payload)\n      };\n    }\n\n  }\n}); // const persistConfig = {\n//   key: 'root',\n//   storage,\n// }\n// export const contactsReducer = persistReducer(persistConfig, contactsSlice.reducer)\n// export const {addContact, deleteContact} = contactsSlice.actions","map":{"version":3,"sources":["/Users/antonlyzun/Desktop/GoIT/goit-react-hw-06-phonebook/src/redux/contacts/contacts-slice.js"],"names":["createSlice","nanoid","initialState","items","filter","contactsSlice","name","reducers","add","reducer","store","payload","prepare","data","id","remove","state","el","actions","contactsSlices","contacts","addContact","push","deleteContact","contact"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,KAAK,EAAE,EADmB;AAE1BC,EAAAA,MAAM,EAAE;AAFkB,CAArB;AAKP,MAAMC,aAAa,GAAGL,WAAW,CAAC;AAChCM,EAAAA,IAAI,EAAE,UAD0B;AAEhCJ,EAAAA,YAAY,EAAEA,YAAY,CAACC,KAFK;AAGhCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,GAAG,EAAE;AACHC,MAAAA,OAAO,CAACC,KAAD,QAAqB;AAAA,YAAb;AAAEC,UAAAA;AAAF,SAAa;AAC1B,eAAO,CAACA,OAAD,EAAU,GAAGD,KAAb,CAAP;AACD,OAHE;;AAIHE,MAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,eAAO;AACLF,UAAAA,OAAO,EAAE,EAAE,GAAGE,IAAL;AAAWC,YAAAA,EAAE,EAAEb,MAAM;AAArB;AADJ,SAAP;AAGD;;AARE,KADG;AAWRc,IAAAA,MAAM,EAAE,CAACC,KAAD,YAAwB;AAAA,UAAhB;AAAEL,QAAAA;AAAF,OAAgB;AAC9B,aAAOK,KAAK,CAACZ,MAAN,CAAaa,EAAE,IAAIA,EAAE,CAACH,EAAH,KAAUH,OAA7B,CAAP;AACD;AAbO;AAHsB,CAAD,CAAjC;AAoBA,OAAO,MAAM;AAAEH,EAAAA,GAAF;AAAOO,EAAAA;AAAP,IAAkBV,aAAa,CAACa,OAAtC;AACP,eAAeb,aAAa,CAACI,OAA7B,C,CACA;AACA;AACA;;AAGA,MAAMU,cAAc,GAAGnB,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,eADyB;AAE/BJ,EAAAA,YAAY,EAAE;AACVkB,IAAAA,QAAQ,EAAE;AADA,GAFiB;AAK/Bb,EAAAA,QAAQ,EAAE;AACNc,IAAAA,UAAU,CAACL,KAAD,SAAqB;AAAA,UAAb;AAAEL,QAAAA;AAAF,OAAa;AAC3BK,MAAAA,KAAK,CAACI,QAAN,CAAeE,IAAf,CAAoBX,OAApB;AAEH,KAJK;;AAKNY,IAAAA,aAAa,CAACP,KAAD,SAAqB;AAAA,UAAb;AAAEL,QAAAA;AAAF,OAAa;AAC9B,aAAO;AACHS,QAAAA,QAAQ,EAAGJ,KAAK,CAACI,QAAN,CAAehB,MAAf,CAAuBoB,OAAO,IAAIA,OAAO,CAACV,EAAR,KAAeH,OAAjD;AADR,OAAP;AAGH;;AATK;AALqB,CAAD,CAAlC,C,CAkBA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n\nexport const initialState = {\n  items: [],\n  filter: '',\n};\n\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: initialState.items,\n  reducers: {\n    add: {\n      reducer(store, { payload }) {\n        return [payload, ...store];\n      },\n      prepare(data) {\n        return {\n          payload: { ...data, id: nanoid() },\n        };\n      },\n    },\n    remove: (state, { payload }) => {\n      return state.filter(el => el.id !== payload);\n    }\n  }\n});\n\nexport const { add, remove } = contactsSlice.actions;\nexport default contactsSlice.reducer;\n// import { createSlice } from \"@reduxjs/toolkit\";\n// import storage from 'redux-persist/lib/storage';\n// import {persistReducer} from 'redux-persist';\n\n\nconst contactsSlices = createSlice({\n    name: 'contactsState',\n    initialState: {\n        contacts: []\n    },\n    reducers: {\n        addContact(state, { payload }) {\n            state.contacts.push(payload)\n          \n        },\n        deleteContact(state, { payload }) {\n            return {\n                contacts:  state.contacts.filter((contact => contact.id !== payload)) \n            }                      \n        }\n    }\n})\n\n// const persistConfig = {\n//   key: 'root',\n//   storage,\n// }\n\n// export const contactsReducer = persistReducer(persistConfig, contactsSlice.reducer)\n\n// export const {addContact, deleteContact} = contactsSlice.actions"]},"metadata":{},"sourceType":"module"}