{"ast":null,"code":"var _jsxFileName = \"/Users/antonlyzun/Desktop/GoIT/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactForm = () => {\n  _s();\n\n  const contacts = useSelector(state => state.contacts.item);\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const error = useSelector(state => state.contacts.error);\n  const dispatch = useDispatch(); // const [name, setName] = useState('');\n  // const [number, setNumber] = useState('');\n\n  const isDuplicate = _ref => {\n    let {\n      name\n    } = _ref;\n    const result = contacts === null || contacts === void 0 ? void 0 : contacts.find(contactItem => contactItem.name.toLowerCase() === name.toLowerCase());\n    return result;\n  };\n\n  const addContactToStore = contactObject => {\n    if (isDuplicate(contactObject)) {\n      return alert(`${contactObject.name} is alredy in contacts`);\n    }\n\n    return dispatch(addContact(contactObject));\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contactObj = {\n      name,\n      number,\n      id: nanoid()\n    };\n    addContactToStore(contactObj);\n    resetState();\n  };\n\n  const resetState = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.container,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: s.form,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true,\n          value: name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"tel\",\n          name: \"number\",\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n          required: true,\n          value: number,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: s.btn,\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactForm, \"/iMSwaLNXgvVaABTqwNjQgBCr9k=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = ContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["/Users/antonlyzun/Desktop/GoIT/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm.js"],"names":["React","useState","nanoid","s","useSelector","useDispatch","addContact","ContactForm","contacts","state","item","isLoading","error","dispatch","isDuplicate","name","result","find","contactItem","toLowerCase","addContactToStore","contactObject","alert","handleChange","e","value","target","setName","setNumber","handleSubmit","preventDefault","contactObj","number","id","resetState","container","form","btn"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operation';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(state => state.contacts.item);\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const error = useSelector(state => state.contacts.error);\n  const dispatch = useDispatch();\n  // const [name, setName] = useState('');\n  // const [number, setNumber] = useState('');\n\n  const isDuplicate = ({ name }) => {\n    const result = contacts?.find(\n      contactItem => contactItem.name.toLowerCase() === name.toLowerCase()\n    );\n    return result;\n  };\n\n  const addContactToStore = contactObject => {\n    if (isDuplicate(contactObject)) {\n      return alert(`${contactObject.name} is alredy in contacts`);\n    }\n\n    return dispatch(addContact(contactObject));\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const contactObj = {\n      name,\n      number,\n      id: nanoid(),\n    };\n\n    addContactToStore(contactObj);\n    resetState();\n  };\n\n  const resetState = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.container}>\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={s.btn} type=\"submit\">Add contact</button>\n      </form>\n      </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}