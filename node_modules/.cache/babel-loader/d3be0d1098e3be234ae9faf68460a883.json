{"ast":null,"code":"var _jsxFileName = \"/Users/antonlyzun/Desktop/GoIT/goit-react-hw-07-phonebook/src/components/ContactsList/ContactItem.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { deleteContact } from 'redux/operation'; // import './ContactList.module.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactItem = _ref => {\n  _s();\n\n  let {\n    name,\n    number,\n    id\n  } = _ref;\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const error = useSelector(state => state.contacts.error);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if ((error === null || error === void 0 ? void 0 : error.id) === id) Notify.failure(error.message);\n  }, [error, id]);\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [name, \": \", number, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      disabled: isLoading === id,\n      onClick: () => dispatch(deleteContact(id)),\n      children: isLoading === id ? 'Deleting...' : 'Delete'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactItem, \"iAlC8IF1vHmJ2SKRcWLpqU8nSNY=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ContactItem;\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactItem\");","map":{"version":3,"sources":["/Users/antonlyzun/Desktop/GoIT/goit-react-hw-07-phonebook/src/components/ContactsList/ContactItem.js"],"names":["useEffect","useDispatch","useSelector","PropTypes","Notify","deleteContact","ContactItem","name","number","id","isLoading","state","contacts","error","dispatch","failure","message","propTypes","string","isRequired"],"mappings":";;;AAAA,SAASA,SAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,oCAAvB;AACA,SAASC,aAAT,QAA8B,iBAA9B,C,CACA;;;AAEA,OAAO,MAAMC,WAAW,GAAG,QAA0B;AAAA;;AAAA,MAAzB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB,GAAyB;AACnD,QAAMC,SAAS,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeF,SAAzB,CAA7B;AACA,QAAMG,KAAK,GAAGX,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeC,KAAzB,CAAzB;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAAa,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEJ,EAAP,MAAcA,EAAlB,EAAsBL,MAAM,CAACW,OAAP,CAAeF,KAAK,CAACG,OAArB;AACvB,GAFQ,EAEN,CAACH,KAAD,EAAQJ,EAAR,CAFM,CAAT;AAKA,sBACE;AAAA,eACGF,IADH,QACWC,MADX,oBACmB;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAEE,SAAS,KAAKD,EAA9C;AAAkD,MAAA,OAAO,EAAE,MAAMK,QAAQ,CAACT,aAAa,CAACI,EAAD,CAAd,CAAzE;AAAA,gBAA+FC,SAAS,KAAKD,EAAd,GAAmB,aAAnB,GAAmC;AAAlI;AAAA;AAAA;AAAA;AAAA,YADnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAfM;;GAAMH,W;UACOJ,W,EACJA,W,EACGD,W;;;KAHNK,W;AAiBbA,WAAW,CAACW,SAAZ,GAAwB;AACtBV,EAAAA,IAAI,EAAEJ,SAAS,CAACe,MAAV,CAAiBC,UADD;AAEtBX,EAAAA,MAAM,EAAEL,SAAS,CAACe,MAAV,CAAiBC,UAFH;AAGtBV,EAAAA,EAAE,EAAEN,SAAS,CAACe,MAAV,CAAiBC;AAHC,CAAxB","sourcesContent":["import { useEffect} from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useSelector } from 'react-redux'\nimport PropTypes from 'prop-types';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { deleteContact } from 'redux/operation'\n// import './ContactList.module.css';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const isLoading = useSelector(state => state.contacts.isLoading)\n  const error = useSelector(state => state.contacts.error)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (error?.id === id) Notify.failure(error.message)\n  }, [error, id])\n  \n\n  return (\n    <li>\n      {name}: {number} <button type=\"button\" disabled={isLoading === id} onClick={() => dispatch(deleteContact(id))}>{isLoading === id ? 'Deleting...' : 'Delete'}</button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n}"]},"metadata":{},"sourceType":"module"}