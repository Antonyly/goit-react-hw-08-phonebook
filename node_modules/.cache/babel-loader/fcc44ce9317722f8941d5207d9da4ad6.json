{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { signup, login, logout, getCurrent } from \"../../shared/services/api/auth\";\nexport const signupUser = createAsyncThunk(\"auth/signup\", async (data, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    return await signup(data);\n  } catch (error) {\n    const {\n      data,\n      status\n    } = error.response;\n    const {\n      message: messageForUser\n    } = error.response.data;\n    const {\n      message\n    } = error;\n    alert('This user has already registered'); // alert(message)\n\n    return rejectWithValue({\n      message,\n      messageForUser,\n      data,\n      status\n    });\n  }\n});\nexport const loginUser = createAsyncThunk(\"auth/login\", async (data, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  try {\n    return await login(data);\n  } catch (error) {\n    const {\n      data,\n      status\n    } = error.response;\n    const {\n      message\n    } = error; // alert('This user has already registered')\n\n    alert(message);\n    return rejectWithValue({\n      data,\n      status,\n      message\n    });\n  }\n});\nexport const logoutUser = createAsyncThunk(\"auth/logout\", async (_, _ref3) => {\n  let {\n    rejectWithValue\n  } = _ref3;\n\n  try {\n    return await logout();\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\nexport const getCurrentUser = createAsyncThunk(\"auth/current\", async (_, _ref4) => {\n  let {\n    rejectWithValue,\n    getState\n  } = _ref4;\n\n  try {\n    const {\n      auth\n    } = getState();\n    const result = await getCurrent(auth.token);\n    return result;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n}, {\n  condition: (_, _ref5) => {\n    let {\n      getState\n    } = _ref5;\n    const {\n      auth\n    } = getState();\n\n    if (!auth.token) {\n      return false;\n    }\n  }\n});","map":{"version":3,"sources":["/Users/antonlyzun/Desktop/GoIT/goit-react-hw-08-phonebook/src/redux/auth/auth-operations.js"],"names":["createAsyncThunk","signup","login","logout","getCurrent","signupUser","data","rejectWithValue","error","status","response","message","messageForUser","alert","loginUser","logoutUser","_","getCurrentUser","getState","auth","result","token","condition"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SACEC,MADF,EAEEC,KAFF,EAGEC,MAHF,EAIEC,UAJF,QAKO,gCALP;AAOA,OAAO,MAAMC,UAAU,GAAGL,gBAAgB,CACxC,aADwC,EAExC,OAAOM,IAAP,WAAqC;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;;AACnC,MAAI;AACF,WAAO,MAAMN,MAAM,CAACK,IAAD,CAAnB;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,UAAM;AAAEF,MAAAA,IAAF;AAAQG,MAAAA;AAAR,QAAmBD,KAAK,CAACE,QAA/B;AACA,UAAM;AAAEC,MAAAA,OAAO,EAAEC;AAAX,QAA8BJ,KAAK,CAACE,QAAN,CAAeJ,IAAnD;AACA,UAAM;AAAEK,MAAAA;AAAF,QAAcH,KAApB;AACAK,IAAAA,KAAK,CAAC,kCAAD,CAAL,CAJc,CAKd;;AACA,WAAON,eAAe,CAAC;AAAEI,MAAAA,OAAF;AAAWC,MAAAA,cAAX;AAA2BN,MAAAA,IAA3B;AAAiCG,MAAAA;AAAjC,KAAD,CAAtB;AACD;AACF,CAbuC,CAAnC;AAgBP,OAAO,MAAMK,SAAS,GAAGd,gBAAgB,CACvC,YADuC,EAEvC,OAAOM,IAAP,YAAqC;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;;AACnC,MAAI;AACF,WAAO,MAAML,KAAK,CAACI,IAAD,CAAlB;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,UAAM;AAAEF,MAAAA,IAAF;AAAQG,MAAAA;AAAR,QAAmBD,KAAK,CAACE,QAA/B;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAcH,KAApB,CAFc,CAGd;;AACAK,IAAAA,KAAK,CAACF,OAAD,CAAL;AACA,WAAOJ,eAAe,CAAC;AAAED,MAAAA,IAAF;AAAQG,MAAAA,MAAR;AAAgBE,MAAAA;AAAhB,KAAD,CAAtB;AACD;AACF,CAZsC,CAAlC;AAeP,OAAO,MAAMI,UAAU,GAAGf,gBAAgB,CACxC,aADwC,EAExC,OAAOgB,CAAP,YAAkC;AAAA,MAAxB;AAAET,IAAAA;AAAF,GAAwB;;AAChC,MAAI;AACF,WAAO,MAAMJ,MAAM,EAAnB;AACD,GAFD,CAEE,OAAOK,KAAP,EAAc;AACd,WAAOD,eAAe,CAACC,KAAD,CAAtB;AACD;AACF,CARuC,CAAnC;AAWP,OAAO,MAAMS,cAAc,GAAGjB,gBAAgB,CAC5C,cAD4C,EAE5C,OAAOgB,CAAP,YAA4C;AAAA,MAAlC;AAAET,IAAAA,eAAF;AAAmBW,IAAAA;AAAnB,GAAkC;;AAC1C,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAWD,QAAQ,EAAzB;AACA,UAAME,MAAM,GAAG,MAAMhB,UAAU,CAACe,IAAI,CAACE,KAAN,CAA/B;AACA,WAAOD,MAAP;AACD,GAJD,CAIE,OAAOZ,KAAP,EAAc;AACd,WAAOD,eAAe,CAACC,KAAD,CAAtB;AACD;AACF,CAV2C,EAW5C;AACEc,EAAAA,SAAS,EAAE,CAACN,CAAD,YAAqB;AAAA,QAAjB;AAAEE,MAAAA;AAAF,KAAiB;AAC9B,UAAM;AAAEC,MAAAA;AAAF,QAAWD,QAAQ,EAAzB;;AACA,QAAI,CAACC,IAAI,CAACE,KAAV,EAAiB;AACf,aAAO,KAAP;AACD;AACF;AANH,CAX4C,CAAvC","sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport {\n  signup,\n  login,\n  logout,\n  getCurrent,\n} from \"../../shared/services/api/auth\";\n\nexport const signupUser = createAsyncThunk(\n  \"auth/signup\",\n  async (data, { rejectWithValue }) => {\n    try {\n      return await signup(data);\n    } catch (error) {\n      const { data, status } = error.response;\n      const { message: messageForUser } = error.response.data;\n      const { message } = error;\n      alert('This user has already registered');\n      // alert(message)\n      return rejectWithValue({ message, messageForUser, data, status });\n    }\n  }\n);\n\nexport const loginUser = createAsyncThunk(\n  \"auth/login\",\n  async (data, { rejectWithValue }) => {\n    try {\n      return await login(data);\n    } catch (error) {\n      const { data, status } = error.response;\n      const { message } = error;\n      // alert('This user has already registered')\n      alert(message)\n      return rejectWithValue({ data, status, message });\n    }\n  }\n);\n\nexport const logoutUser = createAsyncThunk(\n  \"auth/logout\",\n  async (_, { rejectWithValue }) => {\n    try {\n      return await logout();\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const getCurrentUser = createAsyncThunk(\n  \"auth/current\",\n  async (_, { rejectWithValue, getState }) => {\n    try {\n      const { auth } = getState();\n      const result = await getCurrent(auth.token);\n      return result;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n  {\n    condition: (_, { getState }) => {\n      const { auth } = getState();\n      if (!auth.token) {\n        return false;\n      }\n    },\n  }\n);\n"]},"metadata":{},"sourceType":"module"}