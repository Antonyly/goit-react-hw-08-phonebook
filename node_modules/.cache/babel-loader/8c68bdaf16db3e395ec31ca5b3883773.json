{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nimport storage from 'redux-persist/lib/storage';\nexport const initialState = {\n  items: [],\n  filter: ''\n};\nconst contactsSlice = createSlice({\n  name: 'contactsState',\n  initialState: {\n    contacts: []\n  },\n  reducers: {\n    addContact(state, _ref) {\n      let {\n        payload\n      } = _ref;\n      state.contacts.push(payload);\n    },\n\n    deleteContact(state, _ref2) {\n      let {\n        payload\n      } = _ref2;\n      return {\n        contacts: state.contacts.filter(contact => contact.id !== payload)\n      };\n    }\n\n  }\n});\nconst persistConfig = {\n  key: 'root',\n  storage\n};\nexport const {\n  add,\n  remove\n} = contactsSlice.actions;\nexport const contactsReducer = persistReducer(persistConfig, contactsSlice.reducer); // const contactsSlice = createSlice({\n//   name: 'contacts',\n//   initialState: initialState.items,\n//       reducers: {\n//         addContact(state, { payload }) {\n//             state.contacts.push(payload)\n//         },\n//         deleteContact(state, { payload }) {\n//             return {\n//                 contacts:  state.contacts.filter((contact => contact.id !== payload)) \n//             }                      \n//         }\n//   },\n//   // reducers: {\n//   //   add: {\n//   //     reducer(store, { payload }) {\n//   //       return [payload, ...store];\n//   //     },\n//   //     prepare(data) {\n//   //       return {\n//   //         payload: { ...data, id: nanoid() },\n//   //       };\n//   //     },\n//   //   },\n//   //   remove: (state, { payload }) => {\n//   //     return state.filter(el => el.id !== payload);\n//   //   }\n//   // }\n// });\n// export default contactsSlice.reducer;\n// import { createSlice } from \"@reduxjs/toolkit\";\n// import storage from 'redux-persist/lib/storage';\n// import {persistReducer} from 'redux-persist';\n// const contactsSlices = createSlice({\n//     name: 'contactsState',\n//     initialState: {\n//         contacts: []\n//     },\n//     reducers: {\n//         addContact(state, { payload }) {\n//             state.contacts.push(payload)\n//         },\n//         deleteContact(state, { payload }) {\n//             return {\n//                 contacts:  state.contacts.filter((contact => contact.id !== payload)) \n//             }                      \n//         }\n//     }\n// })\n// const persistConfig = {\n//   key: 'root',\n//   storage,\n// }\n// export const contactsReducer = persistReducer(persistConfig, contactsSlice.reducer)\n// export const {addContact, deleteContact} = contactsSlice.actions","map":{"version":3,"sources":["/Users/antonlyzun/Desktop/GoIT/goit-react-hw-06-phonebook/src/redux/contacts/contacts-slice.js"],"names":["createSlice","nanoid","storage","initialState","items","filter","contactsSlice","name","contacts","reducers","addContact","state","payload","push","deleteContact","contact","id","persistConfig","key","add","remove","actions","contactsReducer","persistReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,KAAK,EAAE,EADmB;AAE1BC,EAAAA,MAAM,EAAE;AAFkB,CAArB;AAKP,MAAMC,aAAa,GAAGN,WAAW,CAAC;AAC9BO,EAAAA,IAAI,EAAE,eADwB;AAE9BJ,EAAAA,YAAY,EAAE;AACVK,IAAAA,QAAQ,EAAE;AADA,GAFgB;AAK9BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,CAACC,KAAD,QAAqB;AAAA,UAAb;AAAEC,QAAAA;AAAF,OAAa;AAC3BD,MAAAA,KAAK,CAACH,QAAN,CAAeK,IAAf,CAAoBD,OAApB;AAEH,KAJK;;AAKNE,IAAAA,aAAa,CAACH,KAAD,SAAqB;AAAA,UAAb;AAAEC,QAAAA;AAAF,OAAa;AAC9B,aAAO;AACHJ,QAAAA,QAAQ,EAAGG,KAAK,CAACH,QAAN,CAAeH,MAAf,CAAuBU,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeJ,OAAjD;AADR,OAAP;AAGH;;AATK;AALoB,CAAD,CAAjC;AAkBA,MAAMK,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBhB,EAAAA;AAFoB,CAAtB;AAIA,OAAO,MAAM;AAAEiB,EAAAA,GAAF;AAAOC,EAAAA;AAAP,IAAkBd,aAAa,CAACe,OAAtC;AACP,OAAO,MAAMC,eAAe,GAAGC,cAAc,CAACN,aAAD,EAAgBX,aAAa,CAACkB,OAA9B,CAAtC,C,CAEP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nimport storage from 'redux-persist/lib/storage';\n\nexport const initialState = {\n  items: [],\n  filter: '',\n};\n\nconst contactsSlice = createSlice({\n    name: 'contactsState',\n    initialState: {\n        contacts: []\n    },\n    reducers: {\n        addContact(state, { payload }) {\n            state.contacts.push(payload)\n          \n        },\n        deleteContact(state, { payload }) {\n            return {\n                contacts:  state.contacts.filter((contact => contact.id !== payload)) \n            }                      \n        }\n    }\n})\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\nexport const { add, remove } = contactsSlice.actions;\nexport const contactsReducer = persistReducer(persistConfig, contactsSlice.reducer)\n\n// const contactsSlice = createSlice({\n//   name: 'contacts',\n//   initialState: initialState.items,\n//       reducers: {\n//         addContact(state, { payload }) {\n//             state.contacts.push(payload)\n          \n//         },\n//         deleteContact(state, { payload }) {\n//             return {\n//                 contacts:  state.contacts.filter((contact => contact.id !== payload)) \n//             }                      \n//         }\n//   },\n      \n//   // reducers: {\n//   //   add: {\n//   //     reducer(store, { payload }) {\n//   //       return [payload, ...store];\n//   //     },\n//   //     prepare(data) {\n//   //       return {\n//   //         payload: { ...data, id: nanoid() },\n//   //       };\n//   //     },\n//   //   },\n//   //   remove: (state, { payload }) => {\n//   //     return state.filter(el => el.id !== payload);\n//   //   }\n//   // }\n\n// });\n\n\n// export default contactsSlice.reducer;\n// import { createSlice } from \"@reduxjs/toolkit\";\n// import storage from 'redux-persist/lib/storage';\n// import {persistReducer} from 'redux-persist';\n\n\n// const contactsSlices = createSlice({\n//     name: 'contactsState',\n//     initialState: {\n//         contacts: []\n//     },\n//     reducers: {\n//         addContact(state, { payload }) {\n//             state.contacts.push(payload)\n          \n//         },\n//         deleteContact(state, { payload }) {\n//             return {\n//                 contacts:  state.contacts.filter((contact => contact.id !== payload)) \n//             }                      \n//         }\n//     }\n// })\n\n// const persistConfig = {\n//   key: 'root',\n//   storage,\n// }\n\n// export const contactsReducer = persistReducer(persistConfig, contactsSlice.reducer)\n\n// export const {addContact, deleteContact} = contactsSlice.actions"]},"metadata":{},"sourceType":"module"}